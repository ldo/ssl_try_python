#!/usr/bin/python3
#+
# Example use of Python’s ssl module: client-side.
# The code is written to avoid blocking on actual socket I/O, to make
# it easier to adapt to asynchronous usage.
#
# See the README for details on how to set things up to run this script.
#
# Copyright 2022 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0 <https://creativecommons.org/publicdomain/zero/1.0/>;
# do with it what you will.
#-

import sys
import enum
import socket
import select
import ssl
import getopt

class SOCK_NEED(enum.Enum) :
    "need to wait for socket to allow I/O of this type before TLS" \
    " communication can proceed."
    NOTHING = 0 # I/O can proceed
    READABLE = 1 # wait for socket to become readable
    WRITABLE = 2 # wait for socket to become writable
#end SOCK_NEED

class STATE(enum.Enum) :
    "the state of the connection protocol."
    NEED_HANDSHAKE = 0
    SEND_REQUEST = 1
    RECEIVE_RESPONSE = 2
    CLOSE = 3
#end STATE

server_addr = "127.0.0.1"
server_port = 6420
application_name = "x-incr-integer" # optionally negotiated between both ends
do_reads = do_writes = True
orig_values = [1234, 4321, 5678]
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["noread", "nowrite"]
  )
for keyword, value in opts :
    if keyword == "--noread" :
        do_reads = False
    elif keyword == "--nowrite" :
        do_writes = False
    #end if
#end for
if len(args) not in (1, 3) :
    raise getopt.GetoptError("usage: %s «ca-cert-file» «client-cert-file» «client-key-file»" % sys.argv[0])
#end if
if len(args) == 3 :
    ca_cert_file, client_cert_file, client_key_file = args
else :
    ca_cert_file, = args
    client_cert_file = client_key_file = None
#end if

conn = socket.socket(family = socket.AF_INET, type = socket.SOCK_STREAM)
sctx = ssl.SSLContext(protocol = ssl.PROTOCOL_TLS_CLIENT)
sctx.set_alpn_protocols([application_name])
sctx.verify_mode = ssl.VerifyMode.CERT_REQUIRED
sctx.check_hostname = False
if client_cert_file != None :
    sctx.load_cert_chain(client_cert_file, client_key_file)
#end if
sctx.load_verify_locations(ca_cert_file)
sconn = sctx.wrap_socket(conn, server_side = False, do_handshake_on_connect = False)
sconn.connect((server_addr, server_port))
sconn.setblocking(False)

sock_need = SOCK_NEED.NOTHING
state = STATE.NEED_HANDSHAKE
values = list(orig_values)
nr_sent = 0
while True :
    if sock_need != SOCK_NEED.NOTHING :
        sys.stderr.write("client need %s\n" % sock_need)
        poll = select.poll()
        poll.register \
          (
            sconn,
            {
                SOCK_NEED.READABLE : select.POLLIN,
                SOCK_NEED.WRITABLE : select.POLLOUT,
            }[sock_need]
          )
        ready = poll.poll()
        assert len(ready) == 1
        ready, = ready
        assert ready[0] == sconn.fileno()
        assert ready[1] & (select.POLLIN | select.POLLOUT) != 0
        sock_need = SOCK_NEED.NOTHING
    #end if
    try :
        if state == STATE.NEED_HANDSHAKE :
            sconn.do_handshake()
            sys.stderr.write("handshake done, peer cert = %s\n" % sconn.getpeercert())
            sys.stderr.write("shared_ciphers = %s, chosen cipher = %s\n" % (sconn.shared_ciphers(), sconn.cipher()))
            sys.stderr.write("selected ALPN protocol = %s\n" % sconn.selected_alpn_protocol())
            value = values.pop(0)
            if do_writes :
                state = STATE.SEND_REQUEST
            else :
                state = STATE.RECEIVE_RESPONSE
            #end if
        elif state == STATE.SEND_REQUEST :
            sconn.sendall(str(value).encode())
            nr_sent += 1
            sys.stderr.write("send[%d]: %d\n" % (nr_sent, value))
            if do_reads :
                state = STATE.RECEIVE_RESPONSE
            else :
                if len(values) == 0 :
                    values = list(orig_values)
                #end if
                value = values.pop(0)
            #end if
        elif state == STATE.RECEIVE_RESPONSE :
            response = sconn.recv(128).decode()
            sys.stderr.write("received response = %s\n" % repr(response))
            if len(response) != 0 :
                if len(values) != 0 :
                    value = values.pop(0)
                    state = STATE.SEND_REQUEST
                else :
                    state = STATE.CLOSE
                #end if
            else :
                sys.stderr.write("EOF from server\n")
                state = STATE.CLOSE
            #end if
        elif state == STATE.CLOSE :
            sconn.shutdown(socket.SHUT_RDWR)
            sconn.close()
            state = None
        #end if
        sys.stderr.write("state is now %s\n" % repr(state))
        if state == None :
            break
    except ssl.SSLWantReadError :
        sock_need = SOCK_NEED.READABLE
    except ssl.SSLWantWriteError :
        sock_need = SOCK_NEED.WRITABLE
    #end try
#end while
