This is an example exercise in using Python’s standard [SSL
module](https://docs.python.org/3/library/ssl.html) to set up a secure
connection between a client and a server process, using self-signed
certificates and two-way authentication. This kind of thing is useful
for internal organizational use, where authentication is only needed
between machines that you control, not between you and the general
public. So you are free to create your own CA certificate, and install
it for use on these machines.


Certificate Setup
=================

The details of certificate setup assume you are using
the [OpenSSL](https://www.openssl.org/) command-line tools.
The following takes advantage of the simplified “micro-CA”
mode introduced in OpenSSL 3.0 from September 2021.
If you are still running version 1.1.x of OpenSSL, see the
accompanying `older-openssl.txt` document for details of
how to set up and use a CA with that version.

To use these programs, let’s put the necessary certificates
and keys in some convenient working directory:

    mkdir auth

First, create your self-signed CA certificate, with some suitable
identification information and validity interval:

    openssl req -x509 \
         -subj "/C=NZ/ST=Waikato/L=Hamilton/O=MegaCorp Inc/OU=Staff/CN=Trust Me" \
         -newkey rsa:2048 -nodes -days 365 \
         -keyout auth/test-ca.key -out auth/test-ca.crt

Now create separate client-side and server-side certificates, signed
with this common CA cert, so each end can authenticate to the other,
again with some suitable validity interval:

    openssl req \
         -subj "/C=NZ/ST=Waikato/L=Hamilton/O=MegaCorp Inc/OU=Staff/CN=Client" \
         -newkey rsa:2048 -nodes \
         -CA auth/test-ca.crt -CAkey auth/test-ca.key -days 30 \
         -keyout auth/client.key -out auth/client.crt

    openssl req \
         -subj "/C=NZ/ST=Waikato/L=Hamilton/O=MegaCorp Inc/OU=Staff/CN=Server" \
         -newkey rsa:2048 -nodes \
         -CA auth/test-ca.crt -CAkey auth/test-ca.key -days 30 \
         -keyout auth/server.key -out auth/server.crt

A certificate can contain all kinds of identifying information, which
cannot be tampered with once the certificate has been signed. For
example, the server can use the “subject” information as the
identifying username, to look up which services the client is allowed
to access. Such privileges could be encoded into the certificate
itself, but then changing such information requires revoking existing
certificates and issuing new ones. Of course, the server can have
access to a list of the CA-unique serial numbers of revoked
certificates, and use that to reject a certificate which has otherwise
passed verification.


Running The Programs
====================

Finally, you are ready to actually run the server and client scripts.
The example protocol is absolutely trivial, and just involves the
client sending an integer to the server, which adds 1 to it and sends
the result back.

For extra fun, try the two ends in different terminal sessions, so you
can see both sets of output at once. Both of them need the CA cert
(though not its private key!); in addition, the server needs the
server-side cert and private key, while the client similarly takes the
client-side ones. All of these file names are passed as command
arguments. First, start the server (assuming the file names are as the
examples above):

    ./server_try auth/test-ca.crt auth/server.crt auth/server.key

Then, the client:

    ./client_try auth/test-ca.crt auth/client.crt auth/client.key

and watch the messages.

After the client terminates, the server keeps running, so that it can accept
more client connections. To stop it, type CTRL/C.


Other Things To Try
===================

The scripts as written also allow you to deliberately violate the
protocol in various ways, to see how the other end will react. For
example, you can omit passing a certificate and key file to either
end, though you still have to pass the CA certificate. If you do this,
you should see the other end reject the connection, because the TLS
verification mode is set to require a certificate at both ends.

Also, the `client_try` script has “`--noread`” and “`--nowrite`” options,
where it will send requests without bothering to receive replies, or
alternatively not bother to send requests at all, and just sit listening
for replies which will never come. The server side should timeout and
abort the connection in these situations.

The `--noread` scenario is interesting, because on my machine the client
can get up to about 600,000 requests sent before the buffers in the
Linux kernel network stack get filled with unreceived server replies, and
further sending is blocked.

For fun, try creating a second CA, and use it to create new,
alternative certificates with the same identifying subject
information. Pass the alternative CA, certificate and key file to one
end, and see how the other end reacts--it should fail on the
authentication handshake, because it doesn’t recognize the other CA.

Of course, passing the same alternative CA and certs to both ends should
work fine.

Lawrence D'Oliveiro <ldo@geek-central.gen.nz>
2023 January 14
